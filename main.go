package main

import (
	"embed"
	"flag"
	"fmt"
	"io/fs"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/elga-io/redir/api/profile"
	"github.com/elga-io/redir/api/url"

	// docs is generated by Swag CLI.
	_ "github.com/elga-io/redir/docs"

	httpSwagger "github.com/swaggo/http-swagger"

	stdprometheus "github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"

	kitprometheus "github.com/go-kit/kit/metrics/prometheus"
	"github.com/go-kit/log"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"

	"github.com/patrickmn/go-cache"
)

//go:embed ui/dist
//go:embed ui/dist/_next
//go:embed ui/dist/_next/static/chunks/pages/*.js
//go:embed ui/dist/_next/static/*/*.js
var nextFS embed.FS

const (
	defaultPort   = "8080"
	defaultDBFile = "gorm.db"
)

// @title URL API
// @version 0.0.1
// @description Micro-serice for managing URL
// @termsOfService http://elga.io/terms
// @contact.name API Support
// @contact.email support@elga.io
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /
func main() {
	var (
		addr = envString("REDIR_PORT", defaultPort)
		dbf  = envString("REDIR_DB", defaultDBFile)

		httpAddr = flag.String("http.addr", ":"+addr, "HTTP listen address")
		dbFile   = flag.String("db.file", dbf, "Database file")
	)
	flag.Parse()

	// Init logging
	var logger log.Logger
	logger = log.NewLogfmtLogger(os.Stderr)
	logger = log.With(logger, "ts", log.DefaultTimestampUTC)
	logger = log.With(logger, "caller", log.DefaultCaller)

	// Init database
	db, err := gorm.Open(sqlite.Open(*dbFile), &gorm.Config{})
	if err != nil {
		logger.Log("failed to connect database", err)
		os.Exit(2)
	}
	initialMigration(db)

	// Init cache
	c := cache.New(5*time.Minute, 10*time.Minute)

	// Web UI
	distFS, err := fs.Sub(nextFS, "ui/dist")
	ui := http.FileServer(http.FS(distFS))

	if err != nil {
		logger.Log("exit", err)
		os.Exit(2)
	}

	fieldKeys := []string{"method"}

	// URL service
	var us url.Service
	us = url.NewDBService(db, c)
	us = url.LoggingMiddleware(logger)(us)
	us = url.NewInstrumentingService(
		kitprometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: "api",
			Subsystem: "url_service",
			Name:      "request_count",
			Help:      "Number of requests received.",
		}, fieldKeys),
		kitprometheus.NewSummaryFrom(stdprometheus.SummaryOpts{
			Namespace: "api",
			Subsystem: "url_service",
			Name:      "request_latency_microseconds",
			Help:      "Total duration of requests in microseconds.",
		}, fieldKeys),
		us,
	)

	// User service
	var use profile.Service
	use = profile.NewDBService(db, c)
	use = profile.LoggingMiddleware(logger)(use)
	use = profile.NewInstrumentingService(
		kitprometheus.NewCounterFrom(stdprometheus.CounterOpts{
			Namespace: "api",
			Subsystem: "profile_service",
			Name:      "request_count",
			Help:      "Number of requests received.",
		}, fieldKeys),
		kitprometheus.NewSummaryFrom(stdprometheus.SummaryOpts{
			Namespace: "api",
			Subsystem: "profile_service",
			Name:      "request_latency_microseconds",
			Help:      "Total duration of requests in microseconds.",
		}, fieldKeys),
		use,
	)

	httpLogger := log.With(logger, "component", "http")
	mux := http.NewServeMux()

	// Docs and telemetry
	mux.HandleFunc("/swagger/", httpSwagger.WrapHandler)
	http.Handle("/metrics", promhttp.Handler())

	// APIs
	mux.Handle("/url/v1/", url.MakeHTTPHandler(us, httpLogger))
	mux.Handle("/profile/v1/", profile.MakeHTTPHandler(use, httpLogger))

	// Web UI
	mux.Handle("/", ui)
	http.Handle("/", accessControl(mux))

	errs := make(chan error, 2)
	go func() {
		logger.Log("transport", "http", "address", *httpAddr, "msg", "listening")
		errs <- http.ListenAndServe(*httpAddr, nil)
	}()
	go func() {
		c := make(chan os.Signal)
		signal.Notify(c, syscall.SIGINT)
		errs <- fmt.Errorf("%s", <-c)
	}()

	logger.Log("terminated", <-errs)
}

func initialMigration(db *gorm.DB) {
	db.AutoMigrate(&url.URL{})
}

func accessControl(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Origin, Content-Type")

		if r.Method == "OPTIONS" {
			return
		}

		h.ServeHTTP(w, r)
	})
}

func envString(env, fallback string) string {
	e := os.Getenv(env)
	if e == "" {
		return fallback
	}
	return e
}
