package main

import (
	"embed"
	"fmt"
	"io/fs"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/elga-io/corgi/server"
	"go.uber.org/zap"

	// the docs' folder is generated by Swag CLI.
	_ "github.com/elga-io/corgi/server/docs"

	"github.com/prometheus/client_golang/prometheus/promhttp"
)

//go:embed web/dist
//go:embed web/dist/_next
//go:embed web/dist/_next/static/chunks/pages/*.js
//go:embed web/dist/_next/static/*/*.js
var nextFS embed.FS

func main() {
	logger := server.NewLogger()
	config := server.NewConfig(*logger, ".")

	database := server.NewDatabase(*logger, config)
	//cache := server.NewCache(*logger, config)

	if err := database.DB.AutoMigrate(&server.Account{}, &server.Link{}, &server.Token{}); err != nil {
		logger.Errorw("error in auto migrate", "err", err.Error())
		os.Exit(1)
	}
	database.SeedUsers()

	ui := initWebUI(*logger)
	service := server.NewService(*logger, config.SecretKey, database.DB)
	middlewares := server.NewMiddlewares(*logger, config)

	mux := http.NewServeMux()
	mux.Handle("/api/v1/", server.MakeHTTPHandler(service, middlewares))
	mux.Handle("/metrics", promhttp.Handler())
	mux.Handle("/", ui)

	http.Handle("/", middlewares.AccessControl(mux))
	startServer(*logger, config.ServerAddress)
}

func initWebUI(logger zap.SugaredLogger) (ui http.Handler) {
	distFS, err := fs.Sub(nextFS, "ui/dist")
	ui = http.FileServer(http.FS(distFS))

	if err != nil {
		logger.Infow("error to start web UI", "err", err)
		os.Exit(2)
	}
	return
}

func startServer(logger zap.SugaredLogger, httpAddr string) {
	errs := make(chan error, 2)
	go func() {
		logger.Infow("listening http server", "address", httpAddr)
		errs <- http.ListenAndServe(httpAddr, nil)
	}()
	go func() {
		c := make(chan os.Signal)
		signal.Notify(c, syscall.SIGINT)
		errs <- fmt.Errorf("%s", <-c)
	}()

	logger.Infow("terminated", "err", <-errs)
}
